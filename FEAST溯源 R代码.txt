#加载需要使用的R包
ibrary("vegan")
library("dplyr")
library("doParallel")
library("foreach")
library("mgcv")
library("reshape2")
library("ggplot2")
library("cowplot")
library("Rcpp")
library("RcppArmadillo")
library(RColorBrewer)
library(dplyr)
library(graphics)
#准备
rm(list = ls())
gc()
#所有需要设置的变量，共3个
#Set the arguments of your data设置计算数据，最好都统一为csv格式
metadata_file = "all_meta.csv" #分组信息
count_matrix = "all_otu.csv" #otu表
EM_iterations = 1000 #default value=1000
##if you use different sources for each sink, different_sources_flag = 1, otherwise = 0
different_sources_flag = 0
#改变系统默认路径
print("Change directory path")
dir_path = paste("C:/Users/Robin.DESKTOP-0U5O684/Desktop/FEAST/") #修改成FEAST文件夹所在目录
#Load main code加载主程序，
setwd(paste0(dir_path, "R"))
source("FEAST.R")
# Load sample metadata加载数据，仍旧统一为csv格式
metadata <- read.csv("metadata_example2.csv", header=T, sep = ",", row.names = 1)
# Load OTU table加载OTU表，并转为矩阵
otus <- read.csv("otuexample2.csv", header=T, sep = ",", row.names = 1)
otus <- t(as.matrix(otus))

#EM算法计算过程，不用管
# Extract only those samples in common between the two tables，提取两个表共同的id
common.sample.ids <- intersect(rownames(metadata), rownames(otus))
otus <- otus[common.sample.ids,]
metadata <- metadata[common.sample.ids,]

# Double-check that the mapping file and otu table
# had overlapping samples
if(length(common.sample.ids) <= 1) {
      message <- paste(sprintf('Error: there are %d sample ids in common '),
          'between the metadata file and data table')
        stop(message)
    }
if(different_sources_flag == 0){
        metadata$id[metadata$SourceSink == 'Source'] = NA
        metadata$id[metadata$SourceSink == 'Sink'] = c(1:length(which(metadata$SourceSink == 'Sink')))
  }

envs <- metadata$Env
Ids <- na.omit(unique(metadata$id))
Proportions_est <- list()
for(it in 1:length(Ids)){
# Extract the source environments and source/sink indices
if(different_sources_flag == 1){train.ix <- which(metadata$SourceSink=='Source' & metadata$id == Ids[it])
test.ix <- which(metadata$SourceSink=='Sink' & metadata$id == Ids[it])
} else {train.ix <- which(metadata$SourceSink=='Source')
test.ix <- which(metadata$SourceSink=='Sink' & metadata$id == Ids[it])}

num_sources <- length(train.ix)
COVERAGE =  min(rowSums(otus[c(train.ix, test.ix),]))  #Can be adjusted by the user
str(COVERAGE)

 # Define sources and sinks
sources <- as.matrix(rarefy(otus[train.ix,], COVERAGE))
sinks <- as.matrix(rarefy(t(as.matrix(otus[test.ix,])), COVERAGE))